// This AppScript contains the code for three different functions.
// CampaignReportsToSheets is used to export campaign reports. Keep "Campaign Reports" Sheet active
// ExportMailchimpContactsToSheets is used to export Mailchimp contacts to Google Sheets. Keep "Mailchimp Contacts" Sheet active 
// ImportContactsToMailchimp is used to import contacts from Google Sheets to Mailchimp.





// CampaignReportsToSheets is used to export campaign reports. Keep "Campaign Reports" Sheet active
function CampaignReportsToSheets() {
  var apiKey = "YOUR-API-KEY"; // Please enter your Mailchimp API Key
  var campaignId = 'YOUR-CAMPAIGN-ID'; // Please enter your Campaign Id
  var sheetId = "YOUR-GOOGLESHEETS-ID"; // Please enter your GoogleSheets Id
  var url = "https://<DC>.api.mailchimp.com/3.0/reports/" + campaignId; // Replace "<DC>" with your datacenter (Last four characters of your API Key) 
  
  var response = UrlFetchApp.fetch(url, {
    method: "get",
    headers: {
      "Authorization": "Basic " + Utilities.base64Encode("anystring:" + apiKey)
    }
  });

  var data = JSON.parse(response.getContentText()); // "logNestedValues(data);" to obtain all values of data
  var sheet = SpreadsheetApp.openById(sheetId).getSheetByName("YOUR-SHEET-NAME"); // Please enter "YOUR-SHEET-NAME"
  
  var campaignData = [
    [data.id, data.campaign_title, data.list_id, data.list_name, data.subject_line, data.emails_sent, data.abuse_reports, data.unsubscribed, data.send_time, data.bounces.hard_bounces, data.bounces.soft_bounces, data.forwards.forwards_count, data.forwards.forwards_opens, data.opens.opens_total, data.opens.unique_opens, data.opens.open_rate, data.opens.last_open, data.clicks.clicks_total,data.clicks.unique_clicks, data.clicks.click_rate, data.clicks.last_click]
    // Add more rows as needed.
  ];
  
  sheet.getRange(sheet.getLastRow() + 1, 1, campaignData.length, campaignData[0].length).setValues(campaignData);
}

// Only needed if logNestedValues is used
// function logNestedValues(obj, prefix = "") {
//   for (var key in obj) {
//     if (typeof obj[key] === "object") {
//       logNestedValues(obj[key], prefix + key + ".");
//     } else {
//       Logger.log(prefix + key + ": " + obj[key]);
//     }
//   }
}





// ExportMailchimpContactsToSheets is used to export Mailchimp contacts to Google Sheets. Keep "Mailchimp Contacts" Sheet active 
function ExportMailchimpContactsToSheets() {
  var apiKey = "YOUR-API-KEY"; // Please enter your Mailchimp API Key
  var audienceId = 'YOUR-AUDIENCE-ID'; // Please enter your Audience Id
  var sheetId = "YOUR-GOOGLESHEETS-ID"; // Please enter your GoogleSheets Id
  var sheet = SpreadsheetApp.openById(sheetId).getSheetByName("YOUR-SHEET-NAME"); // Please enter "YOUR-SHEET-NAME"
  
  var baseUrl = 'https://<dc>.api.mailchimp.com/3.0/lists/' + audienceId + '/members'; // Replace "<dc>" with your datacenter (Last four characters of your API Key) 
  var pageSize = 100; // Number of contacts to retrieve per page
  
  var headers = {
    "Authorization": "Basic " + Utilities.base64Encode("anystring:" + apiKey)
  };

  var allContacts = [];
  var offset = 0;
  while (true) {
    var url = baseUrl + '?offset=' + offset + '&count=' + pageSize;

    var options = {
      "method": "get",
      "headers": headers
    };

    var response = UrlFetchApp.fetch(url, options);
    var data = JSON.parse(response.getContentText());
    var contacts = data.members;
    if (contacts.length === 0) {
      break;
    }

    allContacts = allContacts.concat(contacts);
    offset += pageSize;
  }

  var rows = [];
  rows.push(['Email', 'First Name', 'Last Name']);

  for (var i = 0; i < allContacts.length; i++) {
    var contact = allContacts[i];
    rows.push([contact.email_address, contact.merge_fields.FNAME, contact.merge_fields.LNAME]);
  }

  sheet.getRange(1, 1, rows.length, rows[0].length).setValues(rows);
}





// ImportContactsToMailchimp is used to import contacts from Google Sheets to Mailchimp.
function ImportContactsToMailchimp() {
  var ss = SpreadsheetApp.getActiveSpreadsheet(); // Keep the spreadsheet with contact data open  
  var sheet = ss.getSheetByName("YOUR-SHEET-NAME"); // Please enter "YOUR-SHEET-NAME"
  var data = sheet.getDataRange().getValues();

  var apiKey = "YOUR-API-KEY"; // Please enter your Mailchimp API Key
  var audienceId = 'YOUR-AUDIENCE-ID'; // Please enter your Audience Id

  for (var i = 1; i < data.length; i++) {
    var email = data[i][3]; // If email-ids are in the fourth column
    var firstName = data[i][0]; // If email-ids are in the first column
    var lastName = data[i][1]; // If email-ids are in the second column

    var existingContactUrl = 'https://<DC>.api.mailchimp.com/3.0/lists/' + audienceId + '/members/' + encodeURIComponent(email); // Replace "<DC>" with your datacenter (Last four characters of your API Key)
    Logger.log('Existing Contact URL: ' + existingContactUrl);
    var existingContactOptions = {
      method: 'GET',
      headers: {
        'Authorization': 'Bearer ' + apiKey
      }
    };

    var existingContactResponse = UrlFetchApp.fetch(existingContactUrl, {
      method: 'GET',
      headers: {
        'Authorization': 'Bearer ' + apiKey
      },
      muteHttpExceptions: true // To obtain more log reports
    });
    
    var existingContactData = JSON.parse(existingContactResponse.getContentText());

    if (existingContactData.status === 404) {
      // Contact doesn't exist, add it
      var addContactUrl = 'https://<dc>.api.mailchimp.com/3.0/lists/' + audienceId + '/members'; // Replace "<dc>" with your datacenter (Last four characters of your API Key)
      var payload = {
        email_address: email,
        status: 'subscribed',
        merge_fields: {
          FNAME: firstName,
          LNAME: lastName
        }
      };

      var addContactOptions = {
        method: 'POST',
        contentType: 'application/json',
        headers: {
          'Authorization': 'Bearer ' + apiKey
        },
        payload: JSON.stringify(payload)
      };

      var addContactResponse = UrlFetchApp.fetch(addContactUrl, addContactOptions);
      Logger.log(addContactResponse.getContentText());
    } else {
      // Contact already exists, consider updating information
      // You can use the PUT method here to update the contact's info
      Logger.log('Contact already exists: ' + email);
    }
  }
}